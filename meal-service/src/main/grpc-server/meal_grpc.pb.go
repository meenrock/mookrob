// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: meal.proto

package servicemeal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MealClient is the client API for Meal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MealClient interface {
	GetUserFavFood(ctx context.Context, in *GetUserFavFoodRequest, opts ...grpc.CallOption) (Meal_GetUserFavFoodClient, error)
}

type mealClient struct {
	cc grpc.ClientConnInterface
}

func NewMealClient(cc grpc.ClientConnInterface) MealClient {
	return &mealClient{cc}
}

func (c *mealClient) GetUserFavFood(ctx context.Context, in *GetUserFavFoodRequest, opts ...grpc.CallOption) (Meal_GetUserFavFoodClient, error) {
	stream, err := c.cc.NewStream(ctx, &Meal_ServiceDesc.Streams[0], "/meal.Meal/GetUserFavFood", opts...)
	if err != nil {
		return nil, err
	}
	x := &mealGetUserFavFoodClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Meal_GetUserFavFoodClient interface {
	Recv() (*FoodItem, error)
	grpc.ClientStream
}

type mealGetUserFavFoodClient struct {
	grpc.ClientStream
}

func (x *mealGetUserFavFoodClient) Recv() (*FoodItem, error) {
	m := new(FoodItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MealServer is the server API for Meal service.
// All implementations must embed UnimplementedMealServer
// for forward compatibility
type MealServer interface {
	GetUserFavFood(*GetUserFavFoodRequest, Meal_GetUserFavFoodServer) error
	// mustEmbedUnimplementedMealServer()
}

// UnimplementedMealServer must be embedded to have forward compatible implementations.
type UnimplementedMealServer struct {
}

func (UnimplementedMealServer) GetUserFavFood(*GetUserFavFoodRequest, Meal_GetUserFavFoodServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserFavFood not implemented")
}
func (UnimplementedMealServer) mustEmbedUnimplementedMealServer() {}

// UnsafeMealServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MealServer will
// result in compilation errors.
type UnsafeMealServer interface {
	mustEmbedUnimplementedMealServer()
}

func RegisterMealServer(s grpc.ServiceRegistrar, srv MealServer) {
	s.RegisterService(&Meal_ServiceDesc, srv)
}

func _Meal_GetUserFavFood_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUserFavFoodRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MealServer).GetUserFavFood(m, &mealGetUserFavFoodServer{stream})
}

type Meal_GetUserFavFoodServer interface {
	Send(*FoodItem) error
	grpc.ServerStream
}

type mealGetUserFavFoodServer struct {
	grpc.ServerStream
}

func (x *mealGetUserFavFoodServer) Send(m *FoodItem) error {
	return x.ServerStream.SendMsg(m)
}

// Meal_ServiceDesc is the grpc.ServiceDesc for Meal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Meal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meal.Meal",
	HandlerType: (*MealServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUserFavFood",
			Handler:       _Meal_GetUserFavFood_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "meal.proto",
}
