// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: user.proto

package serviceuser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_GetUserById_FullMethodName      = "/protouser.User/GetUserById"
	User_EditUserByUserId_FullMethodName = "/protouser.User/EditUserByUserId"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	GetUserById(ctx context.Context, in *GetUserIdRequest, opts ...grpc.CallOption) (User_GetUserByIdClient, error)
	EditUserByUserId(ctx context.Context, in *EditUserRequest, opts ...grpc.CallOption) (User_EditUserByUserIdClient, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetUserById(ctx context.Context, in *GetUserIdRequest, opts ...grpc.CallOption) (User_GetUserByIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[0], User_GetUserById_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &userGetUserByIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type User_GetUserByIdClient interface {
	Recv() (*UserItem, error)
	grpc.ClientStream
}

type userGetUserByIdClient struct {
	grpc.ClientStream
}

func (x *userGetUserByIdClient) Recv() (*UserItem, error) {
	m := new(UserItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userClient) EditUserByUserId(ctx context.Context, in *EditUserRequest, opts ...grpc.CallOption) (User_EditUserByUserIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[1], User_EditUserByUserId_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &userEditUserByUserIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type User_EditUserByUserIdClient interface {
	Recv() (*UserItem, error)
	grpc.ClientStream
}

type userEditUserByUserIdClient struct {
	grpc.ClientStream
}

func (x *userEditUserByUserIdClient) Recv() (*UserItem, error) {
	m := new(UserItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	GetUserById(*GetUserIdRequest, User_GetUserByIdServer) error
	EditUserByUserId(*EditUserRequest, User_EditUserByUserIdServer) error
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) GetUserById(*GetUserIdRequest, User_GetUserByIdServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUserServer) EditUserByUserId(*EditUserRequest, User_EditUserByUserIdServer) error {
	return status.Errorf(codes.Unimplemented, "method EditUserByUserId not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_GetUserById_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUserIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServer).GetUserById(m, &userGetUserByIdServer{stream})
}

type User_GetUserByIdServer interface {
	Send(*UserItem) error
	grpc.ServerStream
}

type userGetUserByIdServer struct {
	grpc.ServerStream
}

func (x *userGetUserByIdServer) Send(m *UserItem) error {
	return x.ServerStream.SendMsg(m)
}

func _User_EditUserByUserId_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EditUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServer).EditUserByUserId(m, &userEditUserByUserIdServer{stream})
}

type User_EditUserByUserIdServer interface {
	Send(*UserItem) error
	grpc.ServerStream
}

type userEditUserByUserIdServer struct {
	grpc.ServerStream
}

func (x *userEditUserByUserIdServer) Send(m *UserItem) error {
	return x.ServerStream.SendMsg(m)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protouser.User",
	HandlerType: (*UserServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUserById",
			Handler:       _User_GetUserById_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EditUserByUserId",
			Handler:       _User_EditUserByUserId_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "user.proto",
}
